#+TITLE: Work Log
#+AUTHOR: Drew Bruce
#+EMAIL: drew@drewbruce.com

* Introduction
A simplified version of SKX's [[https://github.com/skx/org-worklog][org-worklog]].
Use =M-x today= to go to today or (if it doesn't exist) create an entry for today.

* Recurring Meetings
:PROPERTIES:
:CATEGORY: Meeting
:END:
** Daily Stand-up 
<2020-11-30 Mon 9:15-9:30 +1w>
<2020-12-01 Tue 9:15-9:30 +1w>
<2020-12-02 Wed 9:15-9:30 +1w>
<2020-12-03 Thu 9:15-9:30 +1w>
<2020-12-04 Fri 9:15-9:30 +1w>

* COMMENT MM/DD/YYYY
** Administrivia
None.
** Desktop Setup
None.
** Meetings
:PROPERTIES:
:CATEGORY: Meeting
:END:
*** Put meetings here
** Tickets / Stories / Projects
None.
** TODOs [0%] [0/2]
Entries which are not completed will be moved to the next working day, and marked as canceled.
*** TODO Add time-tracking for the day
*** TODO Parse Inbox
** Outstanding Issues
None.
** END
* Lisp
Helper function for use in file:
- =M-x today= will jump to today's entry, if present. Otherwise, create today's entry.
#+NAME: startblock
#+BEGIN_SRC emacs-lisp :results output silent
  (defun today ()
    "Goto today. If today doesn't exist, create it"
    (interactive)
      (let ((pos nil))
        (save-excursion
          (org-save-outline-visibility t
            (outline-show-all)
            (goto-line 0)
            (if (re-search-forward (format-time-string "^\\* %m/%d/%Y") nil t)
                (setq pos (point))
              (message "No entry for today found."))))
        (if pos
            (progn
              (goto-char pos)
              (outline-hide-sublevels 1)
              (outline-show-subtree)
              t)
          (new-day-insert))))

  ;; List of things we expand inside the templated-section of this file.
  ;; The pairs are "regexp" + "replacement" which is invoked via "apply".
  (setq new-day-template-variables '(
                                     ( "COMMENT "   . (format ""))
                                     ( "YYYY"       . (format-time-string "%Y"))
                                     ( "MM"         . (format-time-string "%m"))
                                     ( "DD"         . (format-time-string "%d"))
                                     ( "HOUR"       . (format-time-string "%H"))
                                     ( "MINUTE"     . (format-time-string "%M"))
                                     ( ":noexport:" . (format ""))))

  (defun new-day-insert ()
    "Insert the contents of a template into the document, for a new day's work.

     This function inserts the block found between '* MM/DD/YYYY' and 'END' into the buffer, replacing 'DD', 'MM', 'YYYY' with the appropriate date-fields."
    (let ((start nil)
          (text nil)
          (case-fold-search nil) ; This ensures our replacements match "HOURS" not "Worked Hours"
          (end nil))
      (save-excursion
        (outline-show-all)
        (goto-line 0)
        (re-search-forward "^\* COMMENT MM/DD/YYYY" )
        (beginning-of-line)
        (backward-char 1)
        (setq start (point))
        ;; point is at the line before "* DD/MM"
        ;; So we want to skip forward
        (next-line 2)
        (re-search-forward "END$")
        (beginning-of-line)
        (backward-char 1)
        (setq end (point))
        (setq text (buffer-substring start end))
        (goto-char (point-min))
        (re-search-forward "\*")
        (beginning-of-line)
        (backward-char 1)
        (setq inserted-start-point (point))

        ; Replace all our template-pairs
        (dolist (item new-day-template-variables)
          (setq text (replace-regexp-in-string (car item) (apply (cdr item)) text)))
        (insert text))
      (goto-char inserted-start-point)
      (outline-hide-sublevels 1)
      (next-line)
      (outline-show-subtree)
      ))
#+END_SRC
Nice helper from [[https://emacs.stackexchange.com/questions/12938/how-can-i-evaluate-elisp-in-an-orgmode-file-when-it-is-opened][Emacs Stackexchange]]
# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (progn (org-babel-goto-named-src-block "startblock") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# End:
